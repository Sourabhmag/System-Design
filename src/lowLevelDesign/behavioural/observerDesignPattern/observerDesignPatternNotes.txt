	Why Use the Observer Design Pattern?
	
	The Observer Design Pattern is a behavioral design pattern that establishes a one-to-many dependency 
	between objects. When one object (the subject) changes its state, all its dependents (observers) 
	are notified and updated automatically. Here's why it's useful:
	
		1) Decouples Subjects and Observers:
			The subject doesn't need to know details about its observers, promoting loose coupling.
			Observers can be added or removed dynamically without modifying the subject.
			
		2) Supports Event-Driven Architectures:
			Ideal for scenarios where changes in one object need to trigger actions in others (e.g., GUI updates, notifications).
		
		3) Promotes Re-usability and Extensibility:
			New observers can be added without changing the subject or existing observers.

		4) Simplifies State Management:
			Observers react to state changes in the subject, reducing the need for polling or manual checks.
			
	When to Use the Observer Design Pattern ?
		1) When State Changes Trigger Actions:
			Example: A stock market system where changes in stock prices notify investors.

		2) Event Handling Systems:
			Example: GUI frameworks where user actions (e.g., button clicks) trigger updates in other components.

		3) Distributed Notification Systems:
			Example: A messaging system where subscribers are notified of new messages.

		4) When You Need Dynamic Relationships:
			Example: A social media platform where users can follow/unfollow others and receive updates.

		5) To Avoid Tight Coupling:
			Example: A weather station that notifies multiple displays (e.g., phone, web, TV) without knowing their implementation details.
			
	Key Take aways
		1) One-to-Many Dependency:
			One subject can notify multiple observers.

		2) Loose Coupling:
			Subjects and observers are independent, making the system more modular.

		3) Push vs. Pull Model:
			Push: The subject sends detailed data to observers.
			Pull: Observers fetch data from the subject as needed.

		4) Dynamic Relationships:
			Observers can be added or removed at runtime.

		5) Common Frameworks and Libraries:
			Many frameworks (e.g., Java's java.util.Observer, C#'s events/delegates) implement this pattern.
			
	Real-World Examples of the Observer Pattern
		1) Stock Market Monitoring Apps
			Stock prices change (subject), and multiple clients (observers) receive updates.
			Example: A trading app where users get real-time price alerts.
			
		2) Social Media Notifications (YouTube, Instagram, Twitter)
			Users subscribe to a channel (observer), and when a new video is uploaded (subject changes), they get notified.
			
		3) Logging Systems
			Different log handlers (observers) get notified when an event occurs in the system.
			
		4) Distributed Systems & Microservices
			A message broker (Kafka, RabbitMQ, MQTT) notifies services (observers) when a new message arrives.
 		5) Weather Monitoring Systems
			Multiple displays update when the weather station (subject) reports new data.
			
	Final Thoughts
		The Observer Pattern is perfect when multiple objects need to stay in sync with changes in a subject. 
		It is widely used in event-driven programming, real-time systems, and GUI frameworks. 
		By implementing it, you can achieve better code organization, loose coupling, and scalability in your application. 
		